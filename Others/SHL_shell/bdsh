#!/bin/bash

declare -a table
declare -A data
declare -A data_length # nb data in each table
declare -A desc
declare -A desc_length # nb fields in each table

FILE=""
JSONFORMATED=0

usage () {
    echo "Usage: ./bdsh [OPTION]... [COMMAND] [REQUEST]
    OPTION:
    -h				display usage
    -f FILE			json database file
    -j              json formated output for select command"
}

print_desc () {
    for db in ${table[@]}; do
        echo "  \"desc_$db\": [" >> "$1"
        for (( k=0; k < ${desc_length[$db]}; k++ )); do
            key=${desc[$db.$k]}
            if [ $((k+1)) == ${desc_length[$db]} ]; then
                echo "    \"$key\"" >> "$1"
            else
                echo "    \"$key\"," >> "$1"
            fi
        done
        echo "  ]," >> "$1"
    done
}

export_data () {
    if [ ! -f "$FILE" ] || [ ! -w "$FILE" ]; then
        exit 1
    fi

    echo "{" > "$1"
    print_desc "$1"
    leng=${#table[@]}
    for db in ${table[@]}; do
        echo -e "  \"data_$db\": [" >> "$1"
        for (( i=0; i < ${data_length[$db]}; i++ )); do
            [ i != 0 ] && echo "    {" >> "$1"
            for (( j=0; j < ${desc_length[$db]}; j++ )); do
                key=${desc[$db.$j]}
                index=$db.$i.$key
                echo -ne "      \"$key\": \"${data[$index]}\"" >> "$1"
                [ $((j+1)) == ${desc_length[$db]} ] && echo -e "" >> "$1" || echo -e "," >> "$1"
            done
            [ $((i+1)) == ${data_length[$db]} ] && echo "    }" >> "$1" || echo "    }," >> "$1"
        done
        leng=$((leng-1))
        [ $leng = 0 ] && echo "  ]" >> "$1" || echo  "  ]," >> "$1"
    done
    echo "}" >> "$1"
}

ParseAction () {
    while [ "$1" != "" ]; do
        case "$1" in
            create)             shift $(( $# > 0 ? 1 : 0 ))
                                create "$@"
                                ;;
            insert)             shift $(( $# > 0 ? 1 : 0 ))
                                insert "$@"
                                ;;
            describe)           shift $(( $# > 0 ? 1 : 0 ))
                                describe "$@"
                                ;;
            select)             shift $(( $# > 0 ? 1 : 0 ))
                                select_db "$@"
                                ;;
            update)             shift $(($# > 0 ? 1 : 0))
                                update "$@"
                                ;;
            delete)             shift $(($# > 0 ? 1 : 0))
                                delete "$@"
                                ;;
        esac
        shift $(( $# > 0 ? 1 : 0 ))
    done
}

ParseArgs () {
    while getopts ":f:hj:" option "$@"; do
    case "${option}" in
        f)
            FILE="${OPTARG}"
            ;;
        h)
            usage
            exit 0
            ;;
        j)
            JSONFORMATED=1
            ;;
        esac
    done

    if [ -z "$FILE" ] && [ -n "$BDSH_File" ];
    then
        FILE=$BDSH_File
    elif [ -z "$FILE" ] && [ -f ".bdshrc" ];
    then 
        foo="`cat .bdshrc`"
        if [[ "$foo" =~ ^BDSH_File=(.*)$ ]]
        then
            FILE="${BASH_REMATCH[1]}"
        fi
    elif [ -z "$FILE" ];
    then
        echo "pas de file"
        exit 1
    fi
}

read_db()
{
    if [ -f $1 ] && [ ! -r $1 ]; then
        exit 1
    elif [ ! -f $1 ]; then
        return
    fi
    jsonfile=`cat $1`

    while [[ "$jsonfile" =~ \"desc_([^\"]*)\"[[:blank:]]*:[[:blank:]]*\[([^\[]*)\] ]]; do
        db=${BASH_REMATCH[1]}
        table[${#table[@]}]=$db
        desc_length[$db]=0
        
        json2="${BASH_REMATCH[2]}"
        while [[ "$json2" =~ \"([^\"]*)\" ]]; do
            desc[${db}.${desc_length[$db]}]="${BASH_REMATCH[1]}"
            desc_length[$db]=$((${desc_length[$db]}+1))
            json2=${json2#*\"}
            json2=${json2#*\"}
        done
        
        jsonfile=${jsonfile#*]}
    done

    while [[ "$jsonfile" =~ \"data_([^\"]*)\"[[:blank:]]*:[[:blank:]]*\[([^\[]*)\] ]]; do
        db="${BASH_REMATCH[1]}"
        data_length[$db]=0

        json2="${BASH_REMATCH[2]}"
        while [[ "$json2" =~ \{([^\}]*)\} ]]; do
            json3="${BASH_REMATCH[1]}"
            while [[ "$json3" =~ \"([^\"]*)\"[[:blank:]]*:[[:blank:]]*\"([^\"]*)\" ]]; do
                data[$db.${data_length[$db]}.${BASH_REMATCH[1]}]="${BASH_REMATCH[2]}"
                json3=${json3#*\"}
                json3=${json3#*\"}
                json3=${json3#*\"}
                json3=${json3#*\"}
            done
            #echo ""
            json2=${json2#*\}}
            data_length[$db]=$((${data_length[$db]}+1))
        done
        jsonfile=${jsonfile#*]}
    done
}

describe()
{
    if [[ " ${table[*]} " =~ \ $1\  ]]; then
        for (( index=0; index < ${desc_length[$1]}; index++)); do
            echo "${desc[$1.$index]}"
        done
    else
        for db in ${table[@]}; do
            echo "$db"
        done
        exit 1
    fi
}

where()
{
    bool=true
    if [[ ! "$1" =~ ([^=]*)=(.*) ]]; then
        bool=false
        return
    fi
    args="$1,"
    while [[ "$args" =~ ([^=]*)=([^,]*) ]] && [ "$bool" = "true" ]; do
        var="${BASH_REMATCH[1]}"
        cond="${BASH_REMATCH[2]}"
        if [ "${data[$db.$2.$var]}" = "$cond" ]; then
            bool=true
        else
            bool=false
        fi
        args="${args#*,}"
    done
}

create()
{
    if [ $# = 1 ] && [ $1 = "database" ] && [ ! -e "$FILE" ]; then
        echo -e "{\n}" > "$FILE"
    elif [ $# = 3 ] && [ $1 = "table" ]; then
        table[${#table[*]}]="$2"
        desc_length[$2]=0
        data_length[$2]=0
        args="$3,"
        while [[ "$args" =~ ([^,]*), ]]; do
            desc[$2.${desc_length[$2]}]="${BASH_REMATCH[1]}"
            desc_length[$2]=$((${desc_length[$2]}+1))
            args=${args#*,}
        done
    else
        exit 1
    fi
    export_data "$FILE"
}

update()
{
    if [ $# = 4 ] && [[ " ${table[*]} " =~ \ $1\  ]] && [[ $3 = "where" ]]; then
        db=$1
        for ((i=0; i < ${data_length[$db]}; i++)); do
            where "$4" $i
            if [ $bool = "true" ]; then
                for ((j=0; j < ${desc_length[$db]}; j++)); do
                    field=${desc[$db.$j]}
                    if [[ ",$2" =~ ,$field=([^,]*) ]]; then
                        data[$db.$i.$field]="${BASH_REMATCH[1]}"
                    fi
                done
            fi
        done
    else
        exit 1
    fi
    export_data "$FILE"
}

insert()
{
    if [ $# = 2 ] && [[ " ${table[*]} " =~ \ $1\  ]]; then
        for ((i=0; i < ${desc_length[$1]}; i++)); do
            key="${desc[$1.$i]}"
            if [[ ",$2" =~ ,$key=([^,]*) ]]; then
                data[$1.${data_length[$1]}.$key]="${BASH_REMATCH[1]}"
            else
                data[$1.${data_length[$1]}.$key]=""
            fi
        done
        data_length[$1]=$((${data_length[$1]}+1))
    else
        if [ $# != 2 ]; then
            echo -e "Bad usage of insert:\n\t./dbsh insert table key1=value1,key2=value2,..." > /dev/stderr
        else
            echo "Table $1 does not exist" > /dev/stderr
        fi
        exit 1
    fi
    export_data "$FILE"
}

delete()
{
    if [ $# = 3 ] && [[ " ${table[*]} " =~ \ $1\  ]] && [[ $2 = "where" ]]; then
        db=$1
        for ((i=0; i < ${data_length[$db]}; i++)); do
            where "$3" $i
            if [ $bool = "true" ]; then
                for ((j=0; j < ${desc_length[$db]}; j++)); do
                    field=${desc[$db.$j]}
                    for ((k=$i; k < ${data_length[$db]}; k++)); do
                        data[$db.$k.$field]=${data[$db.$(($k+1)).$field]}
                    done
                done
                data_length[$db]=$((${data_length[$db]}-1))
                i=$(($i-1))
            fi
        done
    else
        exit 1
    fi
    print_select
    export_data "$FILE"
}

order_data()
{
    db=${table[0]}
    for ((i=1; i < ${data_length[$db]}; )); do
        if [ $i -ne 0 ] && [[ "${data[$db.$i.$1]}" < "${data[$db.$(($i-1)).$1]}" ]]; then
            for ((j=0; j < ${desc_length[$db]}; j++)); do
                field="${desc[$db.$j]}"
                tmp="${data[$db.$i.$field]}"
                data[$db.$i.$field]="${data[$db.$(($i-1)).$field]}"
                data[$db.$(($i-1)).$field]="$tmp"
            done
            i=$(($i-1))
        else
            i=$(($i+1))
        fi
    done
}

select_db()
{
    fields=()
    length=0
    db="$1"
    if [[ " ${table[*]} " =~ \ $1\  ]] && (
        [ $# = 2 ] || 
        ([ $# = 3 ] && [ "$3" = "order" ]) ||
        ([ $# = 4 ] && [ "$3" = "where" ]) ||
        ([ $# = 5 ] && [ "$3" = "where" ] && [ "$5" = "order" ])); then
        table=([0]=$1)
        args="$2,"
        while [[ "$args" =~ ([^,]*), ]]; do
            field="${BASH_REMATCH[1]}"
            if [[ " ${desc[*]} " =~ \ $field\  ]]; then
                fields[${#fields[*]}]="$field"
                args="${args#*,}"
            else
                echo "Unknow field $field in table $1" > /dev/stderr
                exit 1
            fi
        done
        if (($# % 2 == 1)); then
            for ((k=${#fields[*]}; k > 0; k--)); do
                order_data "${fields[$(($k-1))]}"
            done
        fi
    else
        exit 1
    fi

    if [ $# -ge 4 ]; then
        for ((i=0; i < ${data_length[$db]}; i++)); do
            where "$4" $i
            if [ $bool = "false" ]; then
                for ((j=0; j < ${desc_length[$db]}; j++)); do
                    field=${desc[$db.$j]}
                    for ((k=$i; k < ${data_length[$db]}; k++)); do
                        data[$db.$k.$field]=${data[$db.$(($k+1)).$field]}
                    done
                done
                data_length[$db]=$((${data_length[$db]}-1))
                i=$(($i-1))
            fi
        done
    fi

    desc_length=([$1]=${#fields[*]})
    desc=()
    for ((i=0; i < ${desc_length[$1]}; i++)); do
        desc[$1.$i]="${fields[$i]}"
    done
    if [ $JSONFORMATED -eq 1 ]; then
        export_data /dev/stdout
    else
        print_select
    fi
}

print_select ()
{
    i=0
    db=${table[0]}
    length="${data_length[$db]}"
    for ((index=0; index < ${desc_length[$db]}; index++)); do
        max_length[$i]=${#desc[$db.$index]}
        field=${desc[$db.$index]}
        for ((j=0; j!=$length; j++)); do
            if [ ${max_length[$i]} -lt ${#data[$db.$j.$field]} ]; then
                max_length[$i]="${#data[$db.$j.$field]}"
            fi
        done
        i=$(($i+1))
    done

    for ((i=0; i < $length+2; i++)); do
        if [ $i -eq 0 ]; then
            for ((j=0; j < ${desc_length[$db]}; j++)); do
                echo -n "${desc[$db.$j]}"
                if ((j != ${desc_length[$db]}-1)); then
                    for ((k=${#desc[$db.$j]}; k < ${max_length[$j]}+2; k++)); do
                        echo -n " "
                    done
                    echo -n "| "
                fi
            done
            echo ""
        elif [ $i -eq 1 ]; then
            for ((j=0; j < ${desc_length[$db]}; j++)); do
                for ((k=0; k < ${max_length[$j]}+2; k++)); do
                    echo -n "-"
                done
                if ((j != ${desc_length[$db]}-1)); then
                    echo -n '--'
                fi
            done
            echo ""
        else
            for ((j=0; j < ${desc_length[$db]}; j++)); do
                field="${desc[$db.$j]}"
                echo -n "${data[$db.$(($i-2)).$field]}"
                if ((j != ${desc_length[$db]}-1)); then
                    for ((k=${#data[$db.$(($i-2)).$field]}; k < ${max_length[$j]}+2; k++)); do
                        echo -n " "
                    done
                    echo -n "| "
                fi
            done
            echo ""
        fi
    done
}

ParseArgs "$@"
read_db "$FILE"
ParseAction "$@"